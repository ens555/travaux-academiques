# -*- coding: utf-8 -*-
"""CNN_KONGO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10wxwJD7rImAIM-ghPic6p9gqRMMpMd65
"""

#librairies
import tensorflow as tf
import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
#from sklearn.model_selection import train_test_split ### split le dataset en deux pour avoir une parti d'entrainement eet l'autre test
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D,Dense,Dropout,Flatten,MaxPooling2D
import numpy as np
import os

#installons une librairie qui contient la fonction Mish
!pip install echoAI

#appel
from echoAI.Activation.Keras.custom_activations import Mish

cifar= tf.keras.datasets.cifar10

(x_train, y_train), (x_test, y_test)= cifar.load_data()

num_train, height, width, depth = x_train.shape

x_train.shape

num_test = x_test.shape[0] 

num_classes = np.unique(y_train).shape[0] # 10 classes

X_train = x_train.reshape(x_train.shape[0],depth, height,width) # transforme un vecteur en matrice pour x_train

X_test = x_test.reshape(x_test.shape[0],depth, height,width)

model_cnn = Sequential()

model_cnn.add(Conv2D(32,kernel_size=(3,3),input_shape=(height,width,depth),strides=(1, 1), padding='same',activation='elu'))


model_cnn.add(Conv2D(32,kernel_size=(3,3),input_shape=(height,width,depth),strides=(1, 1), padding='same',activation='elu'))

model_cnn.add(Conv2D(32,kernel_size=(3,3),input_shape=(height,width,depth),strides=(1, 1), padding='same',activation='elu'))


model_cnn.add(Conv2D(32,kernel_size=(3,3),input_shape=(height,width,depth),strides=(1, 1), padding='same',activation='elu'))


model_cnn.add(Conv2D(32,kernel_size=(3,3),input_shape=(height,width,depth),strides=(1, 1), padding='same',activation='elu'))

model_cnn.add(Conv2D(32,kernel_size=(3,3),input_shape=(height,width,depth),strides=(1, 1), padding='same',activation='relu'))

model_cnn.add(MaxPooling2D(pool_size=(2,2)))
model_cnn.add(Dropout(0.25))

model_cnn.add(Conv2D(64,kernel_size=(3,3),input_shape=(height,width,depth),strides=(1, 1), padding='same',activation=tf.nn.swish))

model_cnn.add(Conv2D(64,kernel_size=(3,3),strides=(1, 1), padding='same',activation=tf.nn.swish))

model_cnn.add(Conv2D(64,kernel_size=(3,3),strides=(1, 1), padding='same',activation=tf.nn.swish))
model_cnn.add(MaxPooling2D(pool_size=(2,2)))

model_cnn.add(Dropout(0.25))

model_cnn.add(Conv2D(128,kernel_size=(3,3),strides=(1, 1), padding='same',activation='elu'))
model_cnn.add(MaxPooling2D(pool_size=(2,2)))

model_cnn.add(Conv2D(128,kernel_size=(3,3),strides=(1, 1), padding='same',activation='elu'))
model_cnn.add(MaxPooling2D(pool_size=(2,2)))

model_cnn.add(Conv2D(256,kernel_size=(3,3),strides=(1, 1), padding='same',activation=tf.nn.swish))
model_cnn.add(MaxPooling2D(pool_size=(2,2)))

model_cnn.add(Dropout(0.25))


model_cnn.add(Flatten())

model_cnn.add(Dense(512,activation=tf.nn.swish))

model_cnn.add(Dense(512,activation=tf.nn.swish))
model_cnn.add(Dropout(0.50))
model_cnn.add(Dense(10,activation=tf.nn.softmax))

model_cnn.summary() ### la structure du modèle

model_cnn.compile(optimizer='sgd',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

model_save = "modeles/CNN_KONGO.h5"
cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=model_save, save_weights_only=True, verbose=1)



resultat = model_cnn.fit(x_train,y_train,epochs=50, callbacks=[cp_callback])

model_cnn.save('CNN_KONGO.h5')

model_cnn.load_weights('CNN_KONGO.h5')

#voir graphiquement la précision du modèle 
plt.plot(resultat.history['accuracy'],color='red', label='precision')
plt.legend()
plt.show()

#voir graphiquement la précision du modèle 
plt.plot(resultat.history['loss'],color='black', label='precision')
plt.legend()
plt.show()

resultat2= model_cnn.evaluate(x_test,y_test)

score= model_cnn.evaluate(x_train, y_train,verbose=0)
print('Test score:', score[0] )
print('Test Précision:', score[1])

erreur_test=score[0]
precision_test=score[1]

prediction=model_cnn.predict(x_test)

prediction[0]

plt.figure(figsize=(20,10))
plt.subplot(1, 2, 1)
#plt.suptitle('Optimizer : Adam', fontsize=10)
plt.ylabel('Loss', fontsize=16)
plt.plot(resultat.history['loss'], label='Erreur training ')
plt.plot(score[0], label='Erreur test')

plt.legend(loc='upper right')

#plt.subplot(1, 2, 2)
#plt.ylabel('Accuracy', fontsize=16)
#plt.plot(resultat.history['accuracy'], label='Training Accuracy')
#plt.plot(resultat.history['val_acc'], label='Validation Accuracy')
#plt.legend(loc='lower right')
plt.show()